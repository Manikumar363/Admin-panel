{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/auth';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nconst register = async credentials => {\n  const response = await api.post('/register', credentials);\n  return response.data;\n};\nconst login = async credentials => {\n  const response = await api.post('/login', credentials);\n  return response.data;\n};\nconst getProfile = async () => {\n  const response = await api.get('/profile');\n  return response.data;\n};\nconst setAuthToken = token => {\n  if (token) {\n    localStorage.setItem('token', token);\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    localStorage.removeItem('token');\n    delete api.defaults.headers.common['Authorization'];\n  }\n};\nexport { register, login, getProfile, setAuthToken };","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","register","credentials","response","post","data","login","getProfile","get","setAuthToken","setItem","defaults","common","removeItem"],"sources":["C:/Users/alles/Downloads/Developement/Admin-Panel/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/auth';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add token to requests if it exists\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nconst register = async (credentials) => {\r\n  const response = await api.post('/register', credentials);\r\n  return response.data;\r\n};\r\n\r\nconst login = async (credentials) => {\r\n  const response = await api.post('/login', credentials);\r\n  return response.data;\r\n};\r\n\r\nconst getProfile = async () => {\r\n  const response = await api.get('/profile');\r\n  return response.data;\r\n};\r\n\r\nconst setAuthToken = (token) => {\r\n  if (token) {\r\n    localStorage.setItem('token', token);\r\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    localStorage.removeItem('token');\r\n    delete api.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\nexport { register, login, getProfile, setAuthToken }; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,gCAAgC;;AAEhD;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,MAAMK,QAAQ,GAAG,MAAOC,WAAW,IAAK;EACtC,MAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,IAAI,CAAC,WAAW,EAAEF,WAAW,CAAC;EACzD,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,MAAMC,KAAK,GAAG,MAAOJ,WAAW,IAAK;EACnC,MAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,IAAI,CAAC,QAAQ,EAAEF,WAAW,CAAC;EACtD,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAMJ,QAAQ,GAAG,MAAMd,GAAG,CAACmB,GAAG,CAAC,UAAU,CAAC;EAC1C,OAAOL,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,MAAMI,YAAY,GAAIZ,KAAK,IAAK;EAC9B,IAAIA,KAAK,EAAE;IACTC,YAAY,CAACY,OAAO,CAAC,OAAO,EAAEb,KAAK,CAAC;IACpCR,GAAG,CAACsB,QAAQ,CAACnB,OAAO,CAACoB,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUf,KAAK,EAAE;EAClE,CAAC,MAAM;IACLC,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;IAChC,OAAOxB,GAAG,CAACsB,QAAQ,CAACnB,OAAO,CAACoB,MAAM,CAAC,eAAe,CAAC;EACrD;AACF,CAAC;AAED,SAASX,QAAQ,EAAEK,KAAK,EAAEC,UAAU,EAAEE,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}